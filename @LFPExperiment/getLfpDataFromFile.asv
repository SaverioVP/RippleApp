function obj = getLfpDataFromFile(obj, filepath, lfp_struct_name, time_struct_name)
%% Description
% - Loads the lfp data from a .mat file at "filepath"
% - The .mat file should contain the continuous lfp data (concatenated 
% together if necessary) from a single tetrode, recorded over a single
% session, and formatted as a matlab struct with the lfp data contained in
% struct_name, and time vector in struct called time_struct_name
% - If the lfp data is of shape 4 x N or N x 4 where N is number of recorded
% samples, this function will assume these are recordings from multiple
% electrodes, and will take only the lfp from the highest power electrode.

% Sets the lfp_data, time_vector and sampling frequency of the
% LFPExperiment object


%% Function private variables
% Frequency range for power calculation, when selecting "best" electrode
f_range = [1, 512];
% vars for electrode selection
max_power = -Inf;
chosen_electrode_data = [];

%& Default outputs in case of errors
num_tetrodes = 1;
obj.lfp_data = cell(num_tetrodes, 1);  % Initialize cell array for one tetrode
time_vector = [];
sf = NaN;

try
    %% Load file into memory
    if ~isfile(filepath)
        fprintf('Error: File "%s" does not exist.\n', filepath);
        return;
    end
    data = load(filepath);
    
    %% Extract LFP data and time vector
    if ~isfield(data, lfp_struct_name)
        fprintf('Error: The LFP struct "%s" is not found in the file "%s".\n', lfp_struct_name, filepath);
        return;
    end
    if ~isfield(data, time_struct_name)
        fprintf('Error: The time struct "%s" is not found in the file "%s".\n', time_struct_name);
        return;
    end
    
    lfp_data_struct = data.(lfp_struct_name);
    obj.time_vec = data.(time_struct_name);
    
    if ~isvector(time_vector)
        fprintf('Error: The time vector "%s" is not a valid 1D array in the file "%s".\n', time_struct_name, filepath);
        return;
    end

    %% Calculate sampling frequency for pwelch
    time_step = mean(diff(time_vector));  % average time step
    obj.sf = 1 / time_step; 
    
    %% If multiple electrodes, choose highest power
    % Check the dimensions of the LFP data
    [rows, cols] = size(lfp_data_struct);
    
    % Check if the LFP data has multiple electrodes
    if rows == 4 || cols == 4
        for elt = 1:4
            % Extract LFP data for the current electrode
            if rows == 4
                lfp_data_elt = lfp_data_struct(elt, :);
            else
                lfp_data_elt = lfp_data_struct(:, elt);
            end
    
            % Compute the power spectral density using pwelch
            % syntax: pwelch(x, window, noverlap, nfft, fs)
            [psd, freqs] = pwelch(lfp_data_elt, 2048, [], [], sf);  
            indices_in_range = freqs >= f_range(1) & freqs <= f_range(2);
            % Number of frequency components in range (Should be N/2 + 1 
            % where N is window size). Use disp(sum(indices_in_range)); to check  
            power_in_range = sum(10 * log10(psd(indices_in_range)));  % Convert power to decibels
    
            % Select the electrode with the highest power
            if power_in_range > max_power
                chosen_electrode_data = lfp_data_elt;
                max_power = power_in_range;
                best_electrode = elt;  % Store the best electrode number
            end
        end
    else
        % If the LFP data is already 1D, use it directly
        chosen_electrode_data = lfp_data_struct;
    end


    obj.lfp_data{1} = chosen_electrode_data;  % assumes only 1 tetrode input for now
    
    % Print the final message including the best electrode and its power
    fprintf('LFP data successfully loaded from %s.\n with length: %d samples.\n', filepath, length(obj.lfp_data{1}));
    if exist('best_electrode', 'var')
        fprintf('Best electrode: %d with power: %.2f dB\n', best_electrode, max_power);
    end

catch ME
    fprintf('Error occurred while loading LFP data:\n%s\n', ME.message);

%% Calc




end